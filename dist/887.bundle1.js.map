{"version":3,"file":"887.bundle1.js","mappings":"+IAAA,MAAMA,EAAkB,+BAajB,SAASC,EAAqBC,GACjC,GAAIA,EAAQC,IAAIC,WAAW,SAAU,CACjC,MAAMC,EAASH,EAAQC,IAAIG,QAAQ,QAAS,IAC5C,GAAIJ,EAAQK,WAAY,CACpB,MAAMC,EAAYN,EAAQK,WAAWE,SAAS,KAAO,GAAK,IAC1D,MAAO,GAAGP,EAAQK,aAAaC,IAAYH,GAC/C,CACA,OAAOL,EAAgBM,QAAQ,WAAYD,EAC/C,CACA,GAAIH,EAAQC,IAAIC,WAAW,QACvB,OAAOF,EAAQC,IAEnB,MAAM,IAAIO,MAAM,uDACpB,C","sources":["webpack://tokenization/./node_modules/thirdweb/dist/esm/utils/arweave.js"],"sourcesContent":["const DEFAULT_GATEWAY = \"https://arweave.net/{fileId}\";\n/**\n * Resolves the scheme of a given Arweave URI and returns the corresponding URL.\n * @param options - The options object containing the Arweave URI\n * @returns The resolved URL\n * @throws Error if the URI scheme is invalid.\n * @example\n * ```ts\n * import { resolveArweaveScheme } from \"thirdweb/storage\";\n * const url = resolveArweaveScheme({ uri: \"ar://<fileId>\" });\n * ```\n * @storage\n */\nexport function resolveArweaveScheme(options) {\n    if (options.uri.startsWith(\"ar://\")) {\n        const fileId = options.uri.replace(\"ar://\", \"\");\n        if (options.gatewayUrl) {\n            const separator = options.gatewayUrl.endsWith(\"/\") ? \"\" : \"/\";\n            return `${options.gatewayUrl}${separator}${fileId}`;\n        }\n        return DEFAULT_GATEWAY.replace(\"{fileId}\", fileId);\n    }\n    if (options.uri.startsWith(\"http\")) {\n        return options.uri;\n    }\n    throw new Error(`Invalid URI scheme, expected \"ar://\" or \"http(s)://\"`);\n}\n//# sourceMappingURL=arweave.js.map"],"names":["DEFAULT_GATEWAY","resolveArweaveScheme","options","uri","startsWith","fileId","replace","gatewayUrl","separator","endsWith","Error"],"sourceRoot":""}